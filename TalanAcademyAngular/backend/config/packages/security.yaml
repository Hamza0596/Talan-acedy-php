
security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
              check_path:               /api/login_check
              success_handler:          lexik_jwt_authentication.handler.authentication_success
              failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            anonymous: true
          #            stateless: true
            guard:
              authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator

        main:
#            http_basic: ~
            logout:
                path:   app_logout
            anonymous: true
            guard:
                authenticators:
                    - App\Security\UserAuthenticator
            access_denied_handler: App\Security\AccessDeniedHandler
            entry_point: fbn_user.login_entry_point
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/user/, roles: [IS_AUTHENTICATED_ANONYMOUSLY], methods: [GET] }
         - { path: ^/api/user/, roles: [IS_AUTHENTICATED_ANONYMOUSLY], methods: [POST] }
         - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/admin/staff_password, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/admin/reset_password, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/admin/RegistredResetPassword, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/admin/, roles: ROLE_ADMIN }
         - { path: ^/mentor/, roles: ROLE_MENTOR }
         - { path: ^/candidate/edit-password$, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/candidate/edit-email$, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/candidate/edit-image$, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/candidate/update-email, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/candidate/profile$, roles: [ROLE_INSCRIT, ROLE_CANDIDAT, ROLE_APPRENTI] }
         - { path: ^/candidate/, roles: [ROLE_INSCRIT, ROLE_CANDIDAT, ROLE_APPRENTI] }
         - { path: ^/apprentice/, roles: [ROLE_INSCRIT, ROLE_CANDIDAT, ROLE_APPRENTI] }
         - { path: ^/efconnect, role:  ROLE_ADMIN}
         - { path: ^/elfinder, role:  ROLE_ADMIN}
